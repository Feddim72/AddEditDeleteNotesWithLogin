//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AuthClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:8080";

    }

    registration(query: ViewRegisterModel , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegistration(_response);
        });
    }

    protected processRegistration(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    login(model: ViewLoginModel , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    refreshToken(email: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Auth/refreshToken?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}
export class AuthQuery{

    get baseUrl() {
      return getBaseUrl() ?? '' + 'https://localhost:8080';
    }

    static get Client() {
      const client = createClient(AuthClient);
      return client;
    }

    static get Url() {
        return new AuthQuery();
    }
      }

export class NoteClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:8080";

    }

    getAll(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<ViewListModelDtoOfViewNoteModelDto> {
        let url_ = this.baseUrl + "/Note/GetAll?";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "$top=" + encodeURIComponent("" + top) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "$skip=" + encodeURIComponent("" + skip) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "$filter=" + encodeURIComponent("" + filter) + "&";
        if (orderby === null)
            throw new Error("The parameter 'orderby' cannot be null.");
        else if (orderby !== undefined)
            url_ += "$orderby=" + encodeURIComponent("" + orderby) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "$count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ViewListModelDtoOfViewNoteModelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ViewListModelDtoOfViewNoteModelDto.fromJS(resultData200);
            return Promise.resolve<ViewListModelDtoOfViewNoteModelDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ViewListModelDtoOfViewNoteModelDto>(null as any);
    }

    get(id: number , cancelToken?: CancelToken | undefined): Promise<ViewNoteModelDto> {
        let url_ = this.baseUrl + "/Note/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<ViewNoteModelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ViewNoteModelDto.fromJS(resultData200);
            return Promise.resolve<ViewNoteModelDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ViewNoteModelDto>(null as any);
    }

    addNote(note: CreateNoteDto , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/Note/AddNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(note);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddNote(_response);
        });
    }

    protected processAddNote(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }

    patch(id: number, note: UpdateNoteDto , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/Note/Patch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(note);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }

    delete(id: number , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/Note/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }
}
type GetAllNoteQueryParameters = {
      top: number | undefined;
      skip: number | undefined;
      filter: string | undefined;
      orderby: string | undefined;
      count: boolean | undefined;
};

type GetNoteQueryParameters = {
      id: number;
};

export class NoteQuery{

    get baseUrl() {
      return getBaseUrl() ?? '' + 'https://localhost:8080';
    }

    static get Client() {
      const client = createClient(NoteClient);
      return client;
    }

    static get Url() {
        return new NoteQuery();
    }

    getAllUrl(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined): string {
      let url_ = this.baseUrl + "/Note/GetAll?";
    if (top === null)
        throw new Error("The parameter 'top' cannot be null.");
    else if (top !== undefined)
        url_ += "$top=" + encodeURIComponent("" + top) + "&";
    if (skip === null)
        throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
        url_ += "$skip=" + encodeURIComponent("" + skip) + "&";
    if (filter === null)
        throw new Error("The parameter 'filter' cannot be null.");
    else if (filter !== undefined)
        url_ += "$filter=" + encodeURIComponent("" + filter) + "&";
    if (orderby === null)
        throw new Error("The parameter 'orderby' cannot be null.");
    else if (orderby !== undefined)
        url_ += "$orderby=" + encodeURIComponent("" + orderby) + "&";
    if (count === null)
        throw new Error("The parameter 'count' cannot be null.");
    else if (count !== undefined)
        url_ += "$count=" + encodeURIComponent("" + count) + "&";
    url_ = url_.replace(/[?&]$/, "");
      return url_;
    }

    static getAllDefaultOptions?: UseQueryOptions<ViewListModelDtoOfViewNoteModelDto, unknown, ViewListModelDtoOfViewNoteModelDto> = {};
    public static getAllQueryKey(dto: GetAllNoteQueryParameters): QueryKey;
    public static getAllQueryKey(top: number | undefined,skip: number | undefined,filter: string | undefined,orderby: string | undefined,count: boolean | undefined): QueryKey;
    public static getAllQueryKey(...params: any[]): QueryKey {
        if (params.length === 1 && isParameterObject(params[0])) {
            const { top, skip, filter, orderby, count,  } = params[0] as GetAllNoteQueryParameters;

            return removeUndefinedFromArrayTail([
                'NoteClient',
                'getAll',
                top as any,
                skip as any,
                filter as any,
                orderby as any,
                count as any,

            ]);
        } else {
            return removeUndefinedFromArrayTail([
                'NoteClient',
                'getAll',
                ...params
            ]);
        }
    }

    private static getAll(context: QueryFunctionContext) {
        return NoteQuery.Client.getAll(
                context.queryKey[2] as number | undefined, 
                context.queryKey[3] as number | undefined, 
                context.queryKey[4] as string | undefined, 
                context.queryKey[5] as string | undefined, 
                context.queryKey[6] as boolean | undefined
            );
    }

    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewNoteModelDto, TError = unknown>(dto: GetAllNoteQueryParameters, options?: UseQueryOptions<ViewListModelDtoOfViewNoteModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewNoteModelDto, TError = unknown>(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined, options?: UseQueryOptions<ViewListModelDtoOfViewNoteModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewNoteModelDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {

        let options: UseQueryOptions<ViewListModelDtoOfViewNoteModelDto, TError, TSelectData> | undefined = undefined;
        let top: any = undefined;
        let skip: any = undefined;
        let filter: any = undefined;
        let orderby: any = undefined;
        let count: any = undefined;
        
        if (params.length > 0) {
            if (isParameterObject(params[0])) {
                ({ top, skip, filter, orderby, count,  } = params[0] as GetAllNoteQueryParameters);
                options = params[1];
            } else {
                [top, skip, filter, orderby, count,  options] = params;
            }
        }
    

        const metaContext = useContext(QueryMetaContext);
        options = addMetaToOptions(options, metaContext);

        return useQuery<ViewListModelDtoOfViewNoteModelDto, TError, TSelectData>({
            queryFn: NoteQuery.getAll,
            queryKey: NoteQuery.getAllQueryKey(top, skip, filter, orderby, count),
            ...NoteQuery.getAllDefaultOptions as unknown as UseQueryOptions<ViewListModelDtoOfViewNoteModelDto, TError, TSelectData>,
            ...options,
        });
    }
    static setGetAllData(queryClient: QueryClient, updater: (data: ViewListModelDtoOfViewNoteModelDto | undefined) => ViewListModelDtoOfViewNoteModelDto, top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined) {
        queryClient.setQueryData(NoteQuery.getAllQueryKey(top, skip, filter, orderby, count),
            updater
        );
    }

    static setGetAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: ViewListModelDtoOfViewNoteModelDto | undefined) => ViewListModelDtoOfViewNoteModelDto) {
        queryClient.setQueryData(queryKey, updater);
    }
    

    getUrl(id: number): string {
      let url_ = this.baseUrl + "/Note/Get/{id}";
    if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");
      return url_;
    }

    static getDefaultOptions?: UseQueryOptions<ViewNoteModelDto, unknown, ViewNoteModelDto> = {};
    public static getQueryKey(id: number): QueryKey;
    public static getQueryKey(...params: any[]): QueryKey {
        if (params.length === 1 && isParameterObject(params[0])) {
            const { id,  } = params[0] as GetNoteQueryParameters;

            return removeUndefinedFromArrayTail([
                'NoteClient',
                'get',
                id as any,

            ]);
        } else {
            return removeUndefinedFromArrayTail([
                'NoteClient',
                'get',
                ...params
            ]);
        }
    }

    private static get(context: QueryFunctionContext) {
        return NoteQuery.Client.get(
                context.queryKey[2] as number
            );
    }

    static useGetQuery<TSelectData = ViewNoteModelDto, TError = unknown>(dto: GetNoteQueryParameters, options?: UseQueryOptions<ViewNoteModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetQuery<TSelectData = ViewNoteModelDto, TError = unknown>(id: number, options?: UseQueryOptions<ViewNoteModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetQuery<TSelectData = ViewNoteModelDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {

        let options: UseQueryOptions<ViewNoteModelDto, TError, TSelectData> | undefined = undefined;
        let id: any = undefined;
        
        if (params.length > 0) {
            if (isParameterObject(params[0])) {
                ({ id,  } = params[0] as GetNoteQueryParameters);
                options = params[1];
            } else {
                [id,  options] = params;
            }
        }
    

        const metaContext = useContext(QueryMetaContext);
        options = addMetaToOptions(options, metaContext);

        return useQuery<ViewNoteModelDto, TError, TSelectData>({
            queryFn: NoteQuery.get,
            queryKey: NoteQuery.getQueryKey(id),
            ...NoteQuery.getDefaultOptions as unknown as UseQueryOptions<ViewNoteModelDto, TError, TSelectData>,
            ...options,
        });
    }
    static setGetData(queryClient: QueryClient, updater: (data: ViewNoteModelDto | undefined) => ViewNoteModelDto, id: number) {
        queryClient.setQueryData(NoteQuery.getQueryKey(id),
            updater
        );
    }

    static setGetDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: ViewNoteModelDto | undefined) => ViewNoteModelDto) {
        queryClient.setQueryData(queryKey, updater);
    }
          }

export class UserClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:8080";

    }

    getAll(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<ViewListModelDtoOfViewUserModelDto> {
        let url_ = this.baseUrl + "/User/GetAll?";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "$top=" + encodeURIComponent("" + top) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "$skip=" + encodeURIComponent("" + skip) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "$filter=" + encodeURIComponent("" + filter) + "&";
        if (orderby === null)
            throw new Error("The parameter 'orderby' cannot be null.");
        else if (orderby !== undefined)
            url_ += "$orderby=" + encodeURIComponent("" + orderby) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "$count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ViewListModelDtoOfViewUserModelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ViewListModelDtoOfViewUserModelDto.fromJS(resultData200);
            return Promise.resolve<ViewListModelDtoOfViewUserModelDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ViewListModelDtoOfViewUserModelDto>(null as any);
    }

    get(id: number , cancelToken?: CancelToken | undefined): Promise<ViewUserModelDto> {
        let url_ = this.baseUrl + "/User/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<ViewUserModelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ViewUserModelDto.fromJS(resultData200);
            return Promise.resolve<ViewUserModelDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ViewUserModelDto>(null as any);
    }

    create(user: CreateUserDto , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/User/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }

    patch(id: number, user: UpdateUserDto , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/User/Patch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }

    delete(id: number , cancelToken?: CancelToken | undefined): Promise<DoneResult> {
        let url_ = this.baseUrl + "/User/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<DoneResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoneResult.fromJS(resultData200);
            return Promise.resolve<DoneResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoneResult>(null as any);
    }
}
type GetAllUserQueryParameters = {
      top: number | undefined;
      skip: number | undefined;
      filter: string | undefined;
      orderby: string | undefined;
      count: boolean | undefined;
};

type GetUserQueryParameters = {
      id: number;
};

export class UserQuery{

    get baseUrl() {
      return getBaseUrl() ?? '' + 'https://localhost:8080';
    }

    static get Client() {
      const client = createClient(UserClient);
      return client;
    }

    static get Url() {
        return new UserQuery();
    }

    getAllUrl(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined): string {
      let url_ = this.baseUrl + "/User/GetAll?";
    if (top === null)
        throw new Error("The parameter 'top' cannot be null.");
    else if (top !== undefined)
        url_ += "$top=" + encodeURIComponent("" + top) + "&";
    if (skip === null)
        throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
        url_ += "$skip=" + encodeURIComponent("" + skip) + "&";
    if (filter === null)
        throw new Error("The parameter 'filter' cannot be null.");
    else if (filter !== undefined)
        url_ += "$filter=" + encodeURIComponent("" + filter) + "&";
    if (orderby === null)
        throw new Error("The parameter 'orderby' cannot be null.");
    else if (orderby !== undefined)
        url_ += "$orderby=" + encodeURIComponent("" + orderby) + "&";
    if (count === null)
        throw new Error("The parameter 'count' cannot be null.");
    else if (count !== undefined)
        url_ += "$count=" + encodeURIComponent("" + count) + "&";
    url_ = url_.replace(/[?&]$/, "");
      return url_;
    }

    static getAllDefaultOptions?: UseQueryOptions<ViewListModelDtoOfViewUserModelDto, unknown, ViewListModelDtoOfViewUserModelDto> = {};
    public static getAllQueryKey(dto: GetAllUserQueryParameters): QueryKey;
    public static getAllQueryKey(top: number | undefined,skip: number | undefined,filter: string | undefined,orderby: string | undefined,count: boolean | undefined): QueryKey;
    public static getAllQueryKey(...params: any[]): QueryKey {
        if (params.length === 1 && isParameterObject(params[0])) {
            const { top, skip, filter, orderby, count,  } = params[0] as GetAllUserQueryParameters;

            return removeUndefinedFromArrayTail([
                'UserClient',
                'getAll',
                top as any,
                skip as any,
                filter as any,
                orderby as any,
                count as any,

            ]);
        } else {
            return removeUndefinedFromArrayTail([
                'UserClient',
                'getAll',
                ...params
            ]);
        }
    }

    private static getAll(context: QueryFunctionContext) {
        return UserQuery.Client.getAll(
                context.queryKey[2] as number | undefined, 
                context.queryKey[3] as number | undefined, 
                context.queryKey[4] as string | undefined, 
                context.queryKey[5] as string | undefined, 
                context.queryKey[6] as boolean | undefined
            );
    }

    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewUserModelDto, TError = unknown>(dto: GetAllUserQueryParameters, options?: UseQueryOptions<ViewListModelDtoOfViewUserModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewUserModelDto, TError = unknown>(top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined, options?: UseQueryOptions<ViewListModelDtoOfViewUserModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetAllQuery<TSelectData = ViewListModelDtoOfViewUserModelDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {

        let options: UseQueryOptions<ViewListModelDtoOfViewUserModelDto, TError, TSelectData> | undefined = undefined;
        let top: any = undefined;
        let skip: any = undefined;
        let filter: any = undefined;
        let orderby: any = undefined;
        let count: any = undefined;
        
        if (params.length > 0) {
            if (isParameterObject(params[0])) {
                ({ top, skip, filter, orderby, count,  } = params[0] as GetAllUserQueryParameters);
                options = params[1];
            } else {
                [top, skip, filter, orderby, count,  options] = params;
            }
        }
    

        const metaContext = useContext(QueryMetaContext);
        options = addMetaToOptions(options, metaContext);

        return useQuery<ViewListModelDtoOfViewUserModelDto, TError, TSelectData>({
            queryFn: UserQuery.getAll,
            queryKey: UserQuery.getAllQueryKey(top, skip, filter, orderby, count),
            ...UserQuery.getAllDefaultOptions as unknown as UseQueryOptions<ViewListModelDtoOfViewUserModelDto, TError, TSelectData>,
            ...options,
        });
    }
    static setGetAllData(queryClient: QueryClient, updater: (data: ViewListModelDtoOfViewUserModelDto | undefined) => ViewListModelDtoOfViewUserModelDto, top: number | undefined, skip: number | undefined, filter: string | undefined, orderby: string | undefined, count: boolean | undefined) {
        queryClient.setQueryData(UserQuery.getAllQueryKey(top, skip, filter, orderby, count),
            updater
        );
    }

    static setGetAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: ViewListModelDtoOfViewUserModelDto | undefined) => ViewListModelDtoOfViewUserModelDto) {
        queryClient.setQueryData(queryKey, updater);
    }
    

    getUrl(id: number): string {
      let url_ = this.baseUrl + "/User/Get/{id}";
    if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");
      return url_;
    }

    static getDefaultOptions?: UseQueryOptions<ViewUserModelDto, unknown, ViewUserModelDto> = {};
    public static getQueryKey(id: number): QueryKey;
    public static getQueryKey(...params: any[]): QueryKey {
        if (params.length === 1 && isParameterObject(params[0])) {
            const { id,  } = params[0] as GetUserQueryParameters;

            return removeUndefinedFromArrayTail([
                'UserClient',
                'get',
                id as any,

            ]);
        } else {
            return removeUndefinedFromArrayTail([
                'UserClient',
                'get',
                ...params
            ]);
        }
    }

    private static get(context: QueryFunctionContext) {
        return UserQuery.Client.get(
                context.queryKey[2] as number
            );
    }

    static useGetQuery<TSelectData = ViewUserModelDto, TError = unknown>(dto: GetUserQueryParameters, options?: UseQueryOptions<ViewUserModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetQuery<TSelectData = ViewUserModelDto, TError = unknown>(id: number, options?: UseQueryOptions<ViewUserModelDto, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
    static useGetQuery<TSelectData = ViewUserModelDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {

        let options: UseQueryOptions<ViewUserModelDto, TError, TSelectData> | undefined = undefined;
        let id: any = undefined;
        
        if (params.length > 0) {
            if (isParameterObject(params[0])) {
                ({ id,  } = params[0] as GetUserQueryParameters);
                options = params[1];
            } else {
                [id,  options] = params;
            }
        }
    

        const metaContext = useContext(QueryMetaContext);
        options = addMetaToOptions(options, metaContext);

        return useQuery<ViewUserModelDto, TError, TSelectData>({
            queryFn: UserQuery.get,
            queryKey: UserQuery.getQueryKey(id),
            ...UserQuery.getDefaultOptions as unknown as UseQueryOptions<ViewUserModelDto, TError, TSelectData>,
            ...options,
        });
    }
    static setGetData(queryClient: QueryClient, updater: (data: ViewUserModelDto | undefined) => ViewUserModelDto, id: number) {
        queryClient.setQueryData(UserQuery.getQueryKey(id),
            updater
        );
    }

    static setGetDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: ViewUserModelDto | undefined) => ViewUserModelDto) {
        queryClient.setQueryData(queryKey, updater);
    }
          }

export class ViewRegisterModel implements IViewRegisterModel {
    login?: string;
    password?: string;
    email?: string;

    constructor(data?: IViewRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ViewRegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new ViewRegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IViewRegisterModel {
    login?: string;
    password?: string;
    email?: string;
}

export class ViewLoginModel implements IViewLoginModel {
    password?: string;
    email?: string;

    constructor(data?: IViewLoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ViewLoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new ViewLoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IViewLoginModel {
    password?: string;
    email?: string;
}

export class ViewListModelDtoOfViewNoteModelDto implements IViewListModelDtoOfViewNoteModelDto {
    data?: ViewNoteModelDto[];
    count?: number | undefined;

    constructor(data?: IViewListModelDtoOfViewNoteModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ViewNoteModelDto.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ViewListModelDtoOfViewNoteModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewListModelDtoOfViewNoteModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IViewListModelDtoOfViewNoteModelDto {
    data?: ViewNoteModelDto[];
    count?: number | undefined;
}

export class ViewNoteModelDto implements IViewNoteModelDto {
    id?: number;
    userId?: number;
    title?: string;
    details?: string;
    isCmpleted?: boolean;
    createDate?: Date;
    editTame?: Date | undefined;

    constructor(data?: IViewNoteModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.details = _data["details"];
            this.isCmpleted = _data["isCmpleted"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.editTame = _data["editTame"] ? new Date(_data["editTame"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ViewNoteModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewNoteModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["details"] = this.details;
        data["isCmpleted"] = this.isCmpleted;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["editTame"] = this.editTame ? this.editTame.toISOString() : <any>undefined;
        return data;
    }
}

export interface IViewNoteModelDto {
    id?: number;
    userId?: number;
    title?: string;
    details?: string;
    isCmpleted?: boolean;
    createDate?: Date;
    editTame?: Date | undefined;
}

export class DoneResult implements IDoneResult {
    resursId?: number;
    touching?: Date;

    constructor(data?: IDoneResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resursId = _data["resursId"];
            this.touching = _data["touching"] ? new Date(_data["touching"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DoneResult {
        data = typeof data === 'object' ? data : {};
        let result = new DoneResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resursId"] = this.resursId;
        data["touching"] = this.touching ? this.touching.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDoneResult {
    resursId?: number;
    touching?: Date;
}

export class CreateNoteDto implements ICreateNoteDto {
    title?: string;
    details?: string;
    userId?: number;

    constructor(data?: ICreateNoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.details = _data["details"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): CreateNoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["details"] = this.details;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ICreateNoteDto {
    title?: string;
    details?: string;
    userId?: number;
}

export class UpdateNoteDto implements IUpdateNoteDto {
    title?: string;
    details?: string;
    isCompleted?: boolean;

    constructor(data?: IUpdateNoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.details = _data["details"];
            this.isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): UpdateNoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["details"] = this.details;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IUpdateNoteDto {
    title?: string;
    details?: string;
    isCompleted?: boolean;
}

export class ViewListModelDtoOfViewUserModelDto implements IViewListModelDtoOfViewUserModelDto {
    data?: ViewUserModelDto[];
    count?: number | undefined;

    constructor(data?: IViewListModelDtoOfViewUserModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ViewUserModelDto.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ViewListModelDtoOfViewUserModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewListModelDtoOfViewUserModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IViewListModelDtoOfViewUserModelDto {
    data?: ViewUserModelDto[];
    count?: number | undefined;
}

export class ViewUserModelDto implements IViewUserModelDto {
    id?: number;
    login?: string;
    password?: string;
    email?: string;

    constructor(data?: IViewUserModelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ViewUserModelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViewUserModelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IViewUserModelDto {
    id?: number;
    login?: string;
    password?: string;
    email?: string;
}

export class CreateUserDto implements ICreateUserDto {
    login?: string;
    password?: string;
    email?: string;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface ICreateUserDto {
    login?: string;
    password?: string;
    email?: string;
}

export class UpdateUserDto implements IUpdateUserDto {
    login?: string;
    password?: string;
    email?: string;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IUpdateUserDto {
    login?: string;
    password?: string;
    email?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

import { useQuery, UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey } from 'react-query';
import { QueryMetaContext, QueryMetaContextValue } from 'react-query-swagger';
import { useContext } from 'react';

function removeUndefinedFromArrayTail<T>(arr: T[]): T[] {
    let lastDefinedValueIndex = arr.length - 1;
    while (lastDefinedValueIndex >= 0) {
        if (arr[lastDefinedValueIndex] === undefined) {
            lastDefinedValueIndex--;
        } else {
            break;
        }
    }
    return lastDefinedValueIndex === arr.length - 1 ? arr : arr.slice(0, lastDefinedValueIndex + 1);
}

/*
  Determines if first parameter of useSomethingQuery is an object with query parameters, or it's a regular parameter
  Returns true if parameter is Object
  Returns false if parameter is number/string/boolean/Date or Array
*/
function isParameterObject(param: unknown) {
    if (param === null || param === undefined) return false;
    if (param instanceof Array) return false;
    const isObject = typeof param === 'object';
    if (!isObject) return false;
    if (param instanceof Date) return false;
    return true;
}

type ClientFactoryFunction = <T>(type: (new (...params: any[]) => T)) => T;
let _clientFactoryFunction: ClientFactoryFunction = <T>(type: (new (...params: any[]) => T)) => {
  const params = [_baseUrl, _axiosFactory()];
  return new type(...params);
};
/*
  Overrides default Client factory function
*/
export function setClientFactory(value: ClientFactoryFunction) {
  _clientFactoryFunction = value;
}

/*
  Returns current Client factory function
*/
export function getClientFactory() {
  return _clientFactoryFunction;
}

/*
  Function that will be called from `useQuery...` methods to get a client of certain type
*/
function createClient<T>(type: (new () => T)) {
  return _clientFactoryFunction(type);
}

let _baseUrl = '';
/*
  Returns the base URL for http requests
*/
export function getBaseUrl(): string {
  return _baseUrl;
}

/*
  Sets the base URL for http requests
*/
export function setBaseUrl(baseUrl: string) {
  _baseUrl = baseUrl;
}

let _axiosFactory: () => AxiosInstance | undefined = () => undefined;
/*
  Returns currently used factory for Axios instances
*/
export function getAxiosFactory() {
  return _axiosFactory;
}
/*
  Sets the factory for Axios instances
*/
export function setAxiosFactory(factory: () => AxiosInstance) {
  _axiosFactory = factory;
}

function addMetaToOptions<TResultType, TError, TSelectData>(options: UseQueryOptions<TResultType, TError, TSelectData> | undefined, metaContext: QueryMetaContextValue) {
  if (metaContext.metaFn) {
    options = options ?? { };
    options.meta = {
      ...metaContext.metaFn(),
      ...options.meta,
    };
  }
  return options;
}